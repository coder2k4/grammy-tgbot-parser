import { MyConversation, MyContext } from "../../types/types";

export async function addScenarioConversation(
	conversation: MyConversation,
	ctx: MyContext
) {
	try {
		await ctx.reply(
			"–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—é –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
		);
		const name = (await conversation.form.text()).trim().toLowerCase();

		if (name === '–æ—Ç–º–µ–Ω–∞') {
			await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			return;
		}

		if (ctx.session.scenarios[name]) {
			await ctx.reply(
				'–°—Ü–µ–Ω–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.'
			);
			return;
		}

		await ctx.reply(
			"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
		);
		const query = await conversation.form.text();

		if (query.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
			await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			return;
		}

		await ctx.reply(
			"–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
		);
		const minCostResponse = await conversation.form.text();

		if (minCostResponse.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
			await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			return;
		}

		const minCost = parseInt(minCostResponse);

		await ctx.reply(
			"–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
		);
		const maxCostResponse = await conversation.form.text();

		if (maxCostResponse.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
			await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			return;
		}

		const maxCost = parseInt(maxCostResponse);

		await ctx.reply(
			"–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∏—Å–∫? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
		);
		const intervalResponse = await conversation.form.text();

		if (intervalResponse.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
			await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			return;
		}

		const interval = parseFloat(intervalResponse);

		if (isNaN(interval) || interval <= 0) {
			await ctx.reply(
				'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.'
			);
			return;
		}

		conversation.session.scenarios[name] = {
			name,
			query,
			interval,
			minCost,
			maxCost,
			isActive: true,
			lastRun: new Date(),
		};

		await ctx.reply(
			`–°—Ü–µ–Ω–∞—Ä–∏–π "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ ${interval} —á.`
		);

		const user = ctx.from;
		console.log('üöÄ ~ parseAllScenarios ~ user:', user);

		// const results = await runScenarioForUser(
		// 	user,
		// 	conversation.session.scenarios[name]
		// );
		// await ctx.reply(
		// 	`–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: –ù–æ–≤—ã—Ö ${results.newAds.length} / –°—Ç–∞—Ä—ã—Ö : ${results.updatedAds.length}\n`
		// );

		// Explicitly save the session
		sessionStorage.write(ctx.from.id.toString(), conversation.session);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤ addScenarioConversation:', error);
		await ctx.reply(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
		);
	}
}